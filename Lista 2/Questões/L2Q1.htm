<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="utf-8">
	<title>IF672 [CIn-UFPE]</title>

	<link href="L2Q1_arquivos/style.css" rel="stylesheet" type="text/css">
	<link href="L2Q1_arquivos/notas.css" rel="stylesheet" type="text/css">

</head>
<body>
<script>
$ = function(id) {
	return document.getElementById(id);
}
hide_box = function (node) {
	node.parentNode.style.opacity = 0.0;
	return false;
}
hide_all_warnings = function () {
	$('notice_box').style.opacity = 0.0;
	$('error_box').style.opacity = 0.0;
}
scrolls_to = function(id) {
	var node = $('scroll_point_'+id);
	if (node)
		node.scrollIntoView();
}
window.onload = function() {
	setTimeout("hide_all_warnings()", 5000);
}
</script>

<div id="notice_box" style="opacity: 0.0; visibility: hidden;"><div class="warning_content" onclick="return hide_box(this);"></div></div>

<div id="error_box" style="opacity: 0.0; visibility: hidden;"><div class="warning_content" onclick="return hide_box(this);"></div></div>

<div id="navi">
	<div id="navi_shadow"></div>
	<ul id="navi_options">
		<div id="logo_cin"></div>
		<li onclick="window.location = 'http://moreno.cin.ufpe.br/~if672ec/index.php';">Home</li>
		<li onclick="window.location = 'http://moreno.cin.ufpe.br/~if672ec/index.php/home/pages/avisos.htm';">Avisos</li>
		<li onclick="window.location = 'http://moreno.cin.ufpe.br/~if672ec/index.php/home/pages/programacao.htm';">Cronograma</li>
		<li onclick="window.location = 'http://moreno.cin.ufpe.br/~if672ec/index.php/home/lists';">Listas</li>
		<li onclick="window.location = 'http://moreno.cin.ufpe.br/~if672ec/index.php/home/pages/aulasPraticas.htm';">Monitoria</li>
		<li onclick="window.location = 'http://moreno.cin.ufpe.br/~if672ec/index.php/home/pages/material.htm';">Material</li>
					<div id="login_button" onclick="window.location = 'http://moreno.cin.ufpe.br/~if672ec/index.php/home/login';">login</div>
			</ul>
	
</div>

<div id="content">

<ul id="browse">
	<li onclick="document.location = 'http://moreno.cin.ufpe.br/~if672ec/index.php/home/lists'">Listas</li>
	<li>L2Q1</li>
</ul>
	
<h1><strong>L2Q1</strong> - O Gigante Acordou</h1>
<ul class="lista_menu">
	<!--<li>Código fonte: <strong>L2Q1.c</strong>, <strong>L2Q1.cpp</strong> ou <strong>L2Q1.java</strong></li>-->
	<li>Entrada: <strong>L2Q1.in</strong></li>
	<li>Saída: <strong>L2Q1.out</strong></li>
		<li style="background: #A22; top: -28px; float: right;" onclick="window.location='http://moreno.cin.ufpe.br/~if672ec/index.php/home/clarifications/57'"><strong>Clarifications</strong></li>
</ul>
<pre>As manifestações no Brasil, que almejam melhoria da saúde, educação, transporte e diminuição da corrupção estão ganhando grandes proporções no cenário nacional. Tendo em vista tais acontecimentos, um dos organizadores do primeiro protesto ocorrido em São Paulo entrou em contato com a monitoria de Algoritmos e Estruturas de Dados de EC para que criassem um programa que cadastre os pseudônimos dos participantes em uma tabela hash seguindo determinadas condições. Como nós, monitores, estamos muito ocupados com projetos, provas e as festividades juninas, tivemos a brilhante ideia de solicitar que vocês, alunos da cadeira, o elaborassem para nós. 
Sua tarefa, então, é a seguinte:
Calcular o resultado de um processo hashing em uma tabela, com 101 posições, contendo strings de, no máximo, 15 caracteres (Apenas letras, maiúsculas ou minúsculas) com os nomes dos manifestantes e implementar as seguintes operações:

Encontrar o índice de determinado elemento, definido por uma chave.
Inserir uma nova chave na tabela hash.
Remover uma chave da tabela.
Para implementar a busca, inserção e remoção, estão definidas as seguintes funções:

Hash(string chave), onde para a string chave: “a1...an”, seja retornado o valor: 

Hash (string chave) = ( h(chave) mod 101 ) , 
onde  h(chave)=19*(ASCII(a1)*1 + ... + ASCII(an)*n).

Caso haja colisão, use o método de endereçamento aberto. Tente inserir a chave na primeira posição K livre da tabela, onde K = ((Hash(chave)+j²+23*j) mod 101), com j = 1,...,19, variando a cada colisão de uma mesma chave. Caso j=19 e haja uma nova colisão, tal chave não poderá ser inserida.</pre>

<h2>Formato de Entrada</h2>
<pre>T // número de casos
N // número de operações (uma por linha)
ADD:string
ou
DEL:string  // não haverá linhas vazias na entrada</pre>

<h2>Formato de Saída</h2>
<pre>Para cada caso, você deve criar uma nova tabela, inserir ou remover chaves, escrever no arquivo o número n de chaves da tabela ( primeira linha da saída de cada caso) e as próximas n linhas, imprimir as chaves no seguinte padrão:
índice:string
Deve haver apenas uma linha em branco ENTRE casos.</pre>

<h2>Exemplos</h2>
<div class="questao_ex_in_out">
<div class="questao_input">
<pre>Entrada (<a href="http://moreno.cin.ufpe.br/%7Eif672ec/index.php/home/download_input/57"><strong>download</strong></a>):

1
11
ADD:marsz
ADD:marsz
ADD:Dabrowski
ADD:z
ADD:ziemii
ADD:wloskiej
ADD:do
ADD:Polski
DEL:od
DEL:do
DEL:wloskiej</pre>
</div>
<div class="questao_output">
<pre>Saída (<a href="http://moreno.cin.ufpe.br/%7Eif672ec/index.php/home/download_output/57"><strong>download</strong></a>):

5
34:Dabrowski
46:Polski
63:marsz
76:ziemii
96:z</pre>
</div>
</div>

</div>


</body></html>